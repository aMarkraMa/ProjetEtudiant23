<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.projet.mapper.EtudiantMapper">
	
	<!-- Cartographie des résultats pour un étudiant, incluant des détails sur sa formation -->
	<resultMap id="etudiantResultMap" type="Etudiant">
		<id column="id_etudiant" property="idEtudiant"/>
		<result column="nom_etudiant" property="nomEtudiant"/>
		<result column="prenom_etudiant" property="prenomEtudiant"/>
		<association property="formation" javaType="formation">
			<id column="id_formation" property="idFormation"/>
			<result column="nom_formation" property="nomFormation"/>
			<result column="promotion" property="promotion"/>
		</association>
	</resultMap>
	
	<!-- Sélection de tous les étudiants avec leurs informations de formation -->
	<select id="selectAll" resultMap="etudiantResultMap" resultType="etudiant">
		select e.id_etudiant, e.nom_etudiant, e.prenom_etudiant, f.id_formation, f.nom_formation, f.promotion
		from etudiants e, formations f
		where e.id_formation = f.id_formation
	</select>
	
	
	<!--Requêtes conditionnelles dynamiques-->
	<select id="selectByCondition" resultType="etudiant" resultMap="etudiantResultMap">
		select e.id_etudiant, e.nom_etudiant, e.prenom_etudiant, f.id_formation, f.nom_formation, f.promotion
		from etudiants e, formations f
		where e.id_formation = f.id_formation
		
		<if test="nomEtudiant != null and nomEtudiant != ''">
			and lower(e.nom_etudiant) like lower(#{nomEtudiant})
		</if>
		<if test="prenomEtudiant != null and prenomEtudiant != ''">
			and lower(e.prenom_etudiant) like lower(#{prenomEtudiant})
		</if>
		<if test="formation != null and formation.nomFormation != null and formation.nomFormation != ''">
			and lower(f.nom_formation) like lower(#{formation.nomFormation})
		</if>
	
	</select>
	
	<!-- Sélection d'un étudiant spécifique par identifiant -->
	<select id="selectById" resultType="com.projet.entity.Etudiant" resultMap="etudiantResultMap">
		select e.id_etudiant, e.nom_etudiant, e.prenom_etudiant, f.id_formation, f.nom_formation, f.promotion
		from etudiants e, formations f
		where e.id_formation = f.id_formation and e.id_etudiant = #{idEtudiant}
	</select>
	
	<!-- Récupération des noms de tous les étudiants -->
	<select id="getNomsEtudiant" resultType="java.lang.String">
		SELECT nom_etudiant
		FROM etudiants
	</select>
	
	<!-- Récupération des prénoms de tous les étudiants -->
	<select id="getPrenomsEtudiant" resultType="java.lang.String">
		SELECT prenom_etudiant
		FROM etudiants
	</select>
	
	<!-- Récupération des identifiants de tous les étudiants -->
	<select id="getIdsEtudiant" resultType="java.lang.Integer">
		SELECT id_etudiant
		FROM etudiants
	</select>
	
	<!-- Sélection des étudiants par identifiant de formation -->
	<select id="getEtudiantsByIdFormation" resultType="com.projet.entity.Etudiant">
		SELECT *
		FROM etudiants
		WHERE id_formation = #{formation.idFormation}
	</select>
	
	<!-- Récupération des identifiants des étudiants selon des critères spécifiques -->
	<select id="getIdsEtudiantByCondition" resultType="java.lang.Integer">
		SELECT id_etudiant
		FROM etudiants
		<where>
			<if test="nomEtudiant != null and nomEtudiant != ''">
				AND lower(nom_etudiant) like lower(#{nomEtudiant})
			</if>
			
			<if test="prenomEtudiant != null and prenomEtudiant != ''">
				AND lower(prenom_etudiant) like lower(#{prenomEtudiant})
			</if>
		</where>
	</select>
	
	<!-- Ajout d'un nouvel étudiant -->
	<insert id="insertEtudiant" useGeneratedKeys="true" keyProperty="idEtudiant">
		insert into etudiants (nom_etudiant, prenom_etudiant, id_formation)
		values (#{nomEtudiant}, #{prenomEtudiant}, #{formation.idFormation});
	</insert>
	
	<!-- Mise à jour des informations d'un étudiant -->
	<update id="updateEtudiant">
		update etudiants
		<set>
			<if test="nomEtudiant != null and nomEtudiant != ''">
				nom_etudiant = #{nomEtudiant},
			</if>
			<if test="prenomEtudiant != null and prenomEtudiant != ''">
				prenom_etudiant = #{prenomEtudiant},
			</if>
			<if test="formation != null">
				id_formation = #{formation.idFormation}
			</if>
		</set>
		where id_etudiant = #{idEtudiant};
	</update>
	
	<!-- Suppression d'un étudiant par identifiant -->
	<delete id="deleteById">
		delete from etudiants
		where id_etudiant = #{idEtudiant};
	</delete>


</mapper>